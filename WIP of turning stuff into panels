package Main;

import javax.swing.*;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;

import javax.sound.sampled.*;

import java.util.Random;

public class Grid extends JFrame {
	private static final int normal = 20;

	public static boolean isInMenu = false;
	public int totalPoints = 0;
	public int currentPoints = 0;

	public int level = 4;
	public int totalLevels = 5;
	MainMenu mainMenu = new MainMenu(false);

	private static final int GRID_SIZE = normal;
	public int[][] grid = new int[GRID_SIZE][GRID_SIZE];
	public JButton[][] buttons = new JButton[GRID_SIZE][GRID_SIZE];
	public boolean[][] coins = new boolean[GRID_SIZE][GRID_SIZE];
	public JLabel coinCounter;
	public JPanel gridMap;
	public JPanel info;
	public Clip deathSFX;
	int playerX;
	int playerY;

	int goalX;
	int goalY;

	Icon Wall = new ImageIcon("res\\Wall.png");
	Icon Player = new ImageIcon("res\\Player.png");
	Icon PathPoint = new ImageIcon("res\\PathPoint.png");
	Icon Path = new ImageIcon("res\\Path.png");
	Icon Goal = new ImageIcon("res\\EndPoint.png");

	Random rnd = new Random();

	public Grid() {
		setTitle("MINORS MINE");
		setSize(700, 700);
		setResizable(false);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setLayout(new GridLayout(2, 1));
		JPanel gridMap = new JPanel();
		gridMap.setLayout(new GridLayout(GRID_SIZE, GRID_SIZE));
		gridMap.setSize(600,600);
		// Create the info label
		JPanel info = new JPanel();
		info.setLayout(new GridLayout(1, 1));	
		info.setSize(100,100);
        JLabel coinCounter = new JLabel("Y");
        coinCounter.setHorizontalAlignment(SwingConstants.CENTER);
        coinCounter.setFont(new Font("Arial", Font.BOLD, 14));
        add(coinCounter, info);
        add(info,GridLayout(0));
		// Create and add buttons to the JFrame
		for (int i = 0; i < GRID_SIZE; i++) {
			for (int j = 0; j < GRID_SIZE; j++) {

				grid[i][j] = 0;
				buttons[i][j] = new JButton();
				buttons[i][j].setBackground(Color.white);
				buttons[i][j].addActionListener(new ButtonClickListener(i, j));
				add(buttons[i][j], gridMap);
			}

		}
		add(gridMap, GridLayout(1));
		setLocationRelativeTo(null);

		try {
			AudioInputStream death = AudioSystem.getAudioInputStream(new File(
					"music\\backgroundMusic.wav"));
			deathSFX = AudioSystem.getClip();
			deathSFX.open(death);

		} catch (UnsupportedAudioFileException | IOException
				| LineUnavailableException e) {
			e.printStackTrace();
		}

		DrawMaze();
		deathSFX.start();
		deathSFX.loop(Clip.LOOP_CONTINUOUSLY);
	}

	private Object GridLayout(int i) {
		// TODO Auto-generated method stub
		return null;
	}

	public void Restart() {
		level = 1;
		totalLevels = 0;
		currentPoints = 0;
		DrawMaze();
	}

	public void DrawMaze() {
		// Read everything from a file
		totalPoints = 0;
		currentPoints = 0;
		String filePath = "Levels\\Medium\\Level " + level; // Replace
															// "file.txt" with
															// the actual file
															// path
		try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
			String line;
			int x = 0;
			while ((line = br.readLine()) != null && x < GRID_SIZE) {
				for (int y = 0; y < GRID_SIZE && y < line.length(); y++) {
					int key = Character.getNumericValue(line.charAt(y));
					grid[x][y] = key;
					if (key == 1) {
						buttons[x][y].setIcon(Wall);
						// buttons[x][y].setEnabled(false);
					}
					if (key == 7) {
						buttons[x][y].setIcon(Player);
						playerX = x;
						playerY = y;
					}
					if (key == 8) {
						buttons[x][y].setIcon(Goal);
						goalX = x;
						goalY = y;

					}
					if (key == 0) {
						// air
						buttons[x][y].setIcon(Path);
					}
					if (key == 6) {
						// coin
						coins[x][y] = true;
						buttons[x][y].setIcon(PathPoint);
						totalPoints++;
					}
				}
				x++;
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		System.out.println(totalPoints);

	}

	private class ButtonClickListener implements ActionListener {
		private int x;
		private int y;

		public ButtonClickListener(int x, int y) {
			this.x = x;
			this.y = y;
		}

		@Override
		public void actionPerformed(ActionEvent e) {	//movement section of code

			// Get where the player is
			if (playerY > y && playerX == x) {

				for (int i = playerY; i >= 0; i--) {
					if (grid[playerX][i] == 6) {
						if(coins[playerX][i] == true){
						// Is on a path point
							coins[playerX][i] =false;
						currentPoints++;
						buttons[playerX][i].setIcon(Path);
						}

					}

					if (grid[playerX][i] == 1) {
						grid[playerX][playerY] = 0;
						grid[playerX][i + 1] = 7;
						buttons[playerX][playerY].setIcon(Path);
						buttons[playerX][i + 1].setIcon(Player);
						playerY = i + 1;

						break;
					}
				}
			} else if (playerY < y && playerX == x) {

				for (int i = playerY; i < GRID_SIZE; i++) {
					if (grid[playerX][i] == 6) {
						if (coins[playerX][i] == true) {
							// Is on a path point
							coins[playerX][i] = false;
							currentPoints++;

							buttons[playerX][i].setIcon(Path);
						}

					}
					if (grid[playerX][i] == 1) {
						grid[playerX][playerY] = 0;
						grid[playerX][i - 1] = 7;
						buttons[playerX][playerY].setIcon(Path);
						buttons[playerX][i - 1].setIcon(Player);
						playerY = i - 1;
						break;
					}
				}
			} else if (playerX > x && playerY == y) {

				for (int i = playerX; i >= 0; i--) {
					if (grid[i][playerY] == 6) {
						if (coins[i][playerY] == true) {
							// Is on a path point
							coins[i][playerY] = false;
							currentPoints++;
							buttons[i][playerY].setIcon(Path);
						}
					}
					if (grid[i][playerY] == 1) {
						grid[playerX][playerY] = 0;
						grid[i + 1][playerY] = 7;
						buttons[playerX][playerY].setIcon(Path);
						buttons[i + 1][playerY].setIcon(Player);
						playerX = i + 1;
						break;
					}
				}
			} else if (playerX < x && playerY == y) {

				for (int i = playerX; i < GRID_SIZE; i++) {
					if (grid[i][playerY] == 6) {
						if (coins[i][playerY] == true) {
							// Is on a path point
							coins[i][playerY] = false;
							currentPoints++;

							buttons[i][playerY].setIcon(Path);
						}

					}
					if (grid[i][playerY] == 1) {
						grid[playerX][playerY] = 0;
						grid[i - 1][playerY] = 7;
						buttons[playerX][playerY].setIcon(Path);
						buttons[i - 1][playerY].setIcon(Player);
						playerX = i - 1;

						break;
					}
				}
				System.out.println(currentPoints);
			}

			if ((playerX == goalX && playerY == goalY)) {
				if (currentPoints == totalPoints) {

					if (level == totalLevels) {
						System.out.println("You Won");

						Restart();
					} else {

						level++;
						DrawMaze();
					}
				} else {
					System.out.println("Not enough Points you need "
							+ (totalPoints - currentPoints)
							+ " to complete the level");
				}
			}
			System.out.println(currentPoints);

		}

	}

}
